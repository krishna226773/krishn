
Cyclic Sort:

When given numbers from range 1 to N Use Cycli sort

In 1 to N range the value is equal to value-1 index position of the array.
In 0 to N range the value is equal to value index position of the array.

String pool is memory that is placed in heap memory(Why String pool? memory optimization).

String immutability, because of immutability security is increased.(Example: four persons having same name if one person changes his name and for the rest the names do not change).

== checks values and both reference variables pointing to same value.

.equals method checks only value is equal or not.

If you want print object the object will convert toString and print it.

StringBuilder class will not create object if you modify that object.

RECURSION:
          Function calling itself 
          
All the function calls goes to stack memory

While the function is not finished executing it will remain in Stack memory.

When a function finishes executing it is removed from the stack, and the flow of program is restored to where that function was called.

Base condition in Recursion:
                         Condition where our recursion will stop making new calling to function.
                         
No Base condition: 
                  Function calling keeps happening.
                  At certain point memory of computer will exceed limit ==> stack Overflow error.
                  
Why Recursion:
              It helps in solving bigger and complex problems in a simple way.
              
              WE can convert recursion solution into iteration and viceversa.
              
              Space complexity is not constant becuase of recursive calls.
              
              It helps in breaking down bigger problems into smaller problems.
              
Fibonacci numbers are the numbers that are obtained by adding previous two numbers.

Tail recursion is the last function that is executed after that nothing will remain to execute.


How to solve recursive?

   Identify if you can break down your problem into smaller problems
   
   Write the recursive relation if needed.
   
   Draw the recursive tree.
   
   See the flow of functions, how they are getting into stack.
   
   Identify and focus left tree calls and right tree calls.
                         
                         



